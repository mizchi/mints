import type { Rule, RuleExpr, Token, Seq, Ref, Not, Or, Eof, Repeat, Atom, Regex, Flags, SeqObject, Any, Snapshot } from "./types";
export declare type Ptr<T> = number & {
    t: T;
};
export declare const _strings: string[];
export declare const $str: (s: string) => Ptr<string>;
export declare const toNode: (input: RuleExpr) => Rule;
export declare function createSnapshot(refId: number): Snapshot;
export declare function compileSnapshot(): Snapshot;
export declare function $def(nodeCreator: () => RuleExpr): number;
export declare function $ref(refId: string | number, reshape?: number): Ref;
export declare function $any<T = string>(len?: number, reshape?: number): Any;
declare type FlagsExpr = string | Flags;
declare type RuleWithFlags = RuleExpr | [flags: FlagsExpr, rule: RuleExpr];
export declare function $seq<T = string, U = string>(children: Array<RuleWithFlags>, reshape?: number): Seq;
export declare function $seqo<T = any, U = any>(children: Array<RuleWithFlags>, reshape?: number): SeqObject<T, U>;
export declare function $repeat_seq(input: Array<RuleWithFlags>, reshapeEach?: number, reshape?: number): Repeat;
export declare function $opt_seq(input: Array<RuleWithFlags>): [Flags, Rule];
export declare function $skip(input: RuleExpr): [Flags, Rule];
export declare function $skip_opt(input: RuleExpr): [Flags, Rule];
export declare function $opt(input: RuleExpr): [Flags, Rule];
export declare function $not(children: RuleExpr[]): Not;
export declare function $or(patterns: Array<RuleExpr>): Or | Rule;
export declare function $repeat<T = any, U = T, R = T[]>(pattern: RuleExpr, reshapeEach?: number, reshape?: number): Repeat<T, U, R>;
export declare function $token<T = string>(expr: string, reshape?: number): Token<T>;
export declare function $regex<T = string>(expr: string, reshape?: number): Regex;
export declare function $r(strings: TemplateStringsArray): Regex;
export declare function $eof(): Eof;
export declare function $atom(parsePtr: number): Atom;
export {};
